#!/usr/bin/env python3
# coding=utf-8

import dbus
import json
import os
import re
import subprocess
import sys
from argparse import ArgumentParser
from configparser import ConfigParser
from enum import Enum


class Yakuake():
    __common_name = 'org.kde.yakuake'
    __konsole_name = 'org.kde.konsole'

    __konsole_session_interface_name = __konsole_name + ".Session"
    __konsole_window_interface_name = __konsole_name + ".Window"

    __introspection_interface_name = 'org.freedesktop.DBus.Introspectable'

    def __init__(self, *args, **kwargs):
        self.__bus = dbus.SessionBus()

        self.__sessions_object = self.__bus.get_object(
            self.__common_name, '/yakuake/sessions'
        )
        self.__sessions_interface = dbus.Interface(
            self.__sessions_object,  self.__common_name
        )

        self.__tabs_object = self.__bus.get_object(
            self.__common_name, '/yakuake/tabs'
        )
        self.__tabs_interface = dbus.Interface(
            self.__tabs_object, self.__common_name
        )

        self.__window_object = self.__bus.get_object(
            self.__common_name, '/yakuake/window'
        )
        self.__window_interface = dbus.Interface(
            self.__window_object, self.__common_name
        )

    @staticmethod
    def __split_number_string(string):
        splits = string.split(",")
        numbers = []
        for split in splits:
            numbers.append(int(split))
        return numbers

    @staticmethod
    def __split_number_string_array(string_array):
        numbers = []
        for string in string_array:
            numbers.append(int(string))
        return numbers

    def __terminal_id_to_konsole_session_id(self, terminal_id):
        konsole_window_object = self.__bus.get_object(
            self.__common_name, '/Windows/{}'.format(terminal_id + 1)
        )
        konsole_sessions = sorted(self.__split_number_string_array(
            konsole_window_object.sessionList(
                dbus_interface=self.__konsole_window_interface_name
            )
        ))
        if len(konsole_sessions) > 1:
            print("Warning: konsole terminal has more than one session open. "
                  "The last will be used returned.",
                  file=sys.stderr)

        return konsole_sessions[-1]

    def active_session_id(self):
        return self.__sessions_interface.activeSessionId()

    def active_terminal_id(self):
        return self.__sessions_interface.activeTerminalId()

    def add_session_quad(self):
        return self.__sessions_interface.addSessionQuad()

    def add_session_two_horizontal(self):
        return self.__sessions_interface.addSessionTwoHorizontal()

    def add_session_two_vertical(self):
        return self.__sessions_interface.addSessionTwoVertical()

    def add_session(self):
        return self.__sessions_interface.addSession()

    def has_terminals_with_keyboard_input_disabled(self, session_id):
        return self.__sessions_interface.hasTerminalsWithKeyboardInputDisabled(
            session_id
        )

    def has_terminals_with_keyboard_input_enabled(self, session_id):
        return self.__sessions_interface.hasTerminalsWithKeyboardInputEnabled(
            session_id
        )

    def has_terminals_with_monitor_activity_disabled(self, session_id):
        return self.__sessions_interface.hasTerminalsWithMonitorActivityDisabled(
            session_id
        )

    def has_terminals_with_monitor_activity_enabled(self, session_id):
        return self.__sessions_interface.hasTerminalsWithMonitorActivityEnabled(
            session_id
        )

    def has_terminals_with_monitor_silence_disabled(self, session_id):
        return self.__sessions_interface.hasTerminalsWithMonitorSilenceDisabled(
            session_id
        )

    def has_terminals_with_monitor_silence_enabled(self, session_id):
        return self.__sessions_interface.hasTerminalsWithMonitorSilenceEnabled(
            session_id
        )

    def has_unclosable_sessions(self):
        return self.__sessions_interface.hasUnclosableSessions()

    def is_session_closable(self, session_id):
        return bool(self.__sessions_interface.isSessionClosable(session_id))

    def is_session_keyboard_input_enabled(self, session_id):
        return bool(self.__sessions_interface.isSessionKeyboardInputEnabled(
            session_id))

    def is_session_monitor_activity_enabled(self, session_id):
        return bool(self.__sessions_interface.isSessionMonitorActivityEnabled(
            session_id))

    def is_session_monitor_silence_enabled(self, session_id):
        return bool(self.__sessions_interface.isSessionMonitorSilenceEnabled(
            session_id))

    def is_terminal_keyboard_input_enabled(self, terminal_id):
        return bool(self.__sessions_interface.isTerminalKeyboardInputEnabled(
            terminal_id))

    def is_terminal_monitor_activity_enabled(self, terminal_id):
        return bool(self.__sessions_interface.isTerminalMonitorActivityEnabled(
            terminal_id))

    def is_terminal_monitor_silence_enabled(self, terminal_id):
        return bool(self.__sessions_interface.isTerminalMonitorSilenceEnabled(
            terminal_id))

    def raise_session(self, session_id):
        self.__sessions_interface.raiseSession(session_id)

    def remove_session(self, session_id):
        self.__sessions_interface.removeSession(session_id)

    def remove_terminal(self, terminal_id):
        self.__sessions_interface.removeTerminal(terminal_id)

    def run_command_in_terminal(self, terminal_id, command):
        self.__sessions_interface.runCommandInTerminal(terminal_id, command)

    def run_command(self, command):
        self.__sessions_interface.runCommand(command)

    def session_id_for_terminal_id(self, terminal_id):
        return self.__sessions_interface.sessionIdForTerminalId(terminal_id)

    def session_id_list(self):
        return self.__split_number_string(
            self.__sessions_interface.sessionIdList()
        )

    def set_session(
            self,
            session_id,
            closable=None,
            keyboard_input_enabled=None,
            monitor_activity_enabled=None,
            monitor_silence_enabled=None
    ):
        if closable is not None:
            self.__sessions_interface.setSessionClosable(session_id, closable)
        if keyboard_input_enabled is not None:
            self.__sessions_interface.setSessionKeyboardInputEnabled(
                session_id,
                keyboard_input_enabled
            )
        if monitor_activity_enabled is not None:
            self.__sessions_interface.setSessionMonitorActivityEnabled(
                session_id,
                monitor_activity_enabled
            )
        if monitor_silence_enabled is not None:
            self.__sessions_interface.setSessionMonitorSilenceEnabled(
                session_id,
                monitor_silence_enabled
            )

    def set_terminal(
            self,
            terminal_id,
            keyboard_input_enabled=None,
            monitor_activity_enabled=None,
            monitor_silence_enabled=None
    ):
        if keyboard_input_enabled is not None:
            self.__sessions_interface.setTerminalKeyboardInputEnabled(
                terminal_id,
                keyboard_input_enabled
            )
        if monitor_activity_enabled is not None:
            self.__sessions_interface.setTerminalMonitorActivityEnabled(
                terminal_id,
                monitor_activity_enabled
            )
        if monitor_silence_enabled is not None:
            self.__sessions_interface.setTerminalMonitorSilenceEnabled(
                terminal_id,
                monitor_silence_enabled
            )

    class SplitType(Enum):
        No_Split = 0
        Left_Right = 1
        Top_Bottom = 2

    def split_session(self, session_id, split_type):
        if split_type == self.SplitType.Left_Right:
            return self.__sessions_interface.splitSessionLeftRight(session_id)
        elif split_type == self.SplitType.Top_Bottom:
            return self.__sessions_interface.splitSessionTopBottom(session_id)
        return -1

    def split_terminal(self, terminal_id, split_type):
        if split_type == self.SplitType.Left_Right:
            return self.__sessions_interface.splitTerminalLeftRight(terminal_id)
        elif split_type == self.SplitType.Top_Bottom:
            return self.__sessions_interface.splitTerminalTopBottom(terminal_id)
        return -1

    def terminal_id_list(self):
        return self.__split_number_string(
            self.__sessions_interface.terminalIdList()
        )

    def terminal_ids_for_session_id(self, session_id):
        return self.__split_number_string(
            self.__sessions_interface.terminalIdsForSessionId(session_id)
        )

    class Direction(Enum):
        Top = 1
        Right = 2
        Bottom = 3
        Left = 4

    def try_grow_terminal(self, terminal_id, direction, pixels=None):
        if direction == self.Direction.Top:
            if pixels is not None:
                return self.__sessions_interface.tryGrowTerminalTop(
                    terminal_id,
                    pixels
                )
            return self.__sessions_interface.tryGrowTerminalTop(terminal_id)
        if direction == self.Direction.Right:
            if pixels is not None:
                return self.__sessions_interface.tryGrowTerminalRight(
                    terminal_id,
                    pixels
                )
            return self.__sessions_interface.tryGrowTerminalRight(terminal_id)
        if direction == self.Direction.Bottom:
            if pixels is not None:
                return self.__sessions_interface.tryGrowTerminalBottom(
                    terminal_id,
                    pixels
                )

            return self.__sessions_interface.tryGrowTerminalBottom(terminal_id)
        if direction == self.Direction.Left:
            if pixels is not None:
                return self.__sessions_interface.tryGrowTerminalLeft(
                    terminal_id,
                    pixels
                )

            return self.__sessions_interface.tryGrowTerminalLeft(terminal_id)

        return -1

    def terminal_pid(self, terminal_id):
        konsole_session = self.__terminal_id_to_konsole_session_id(terminal_id)

        konsole_session_object = self.__bus.get_object(
            self.__common_name, '/Sessions/{}'.format(konsole_session)
        )
        return int(konsole_session_object.processId(
            dbus_interface=self.__konsole_session_interface_name
        ))

    def terminal_forground_pid(self, terminal_id):
        konsole_session = self.__terminal_id_to_konsole_session_id(terminal_id)

        konsole_session_object = self.__bus.get_object(
            self.__common_name, '/Sessions/{}'.format(konsole_session)
        )
        return int(konsole_session_object.foregroundProcessId(
            dbus_interface=self.__konsole_session_interface_name
        ))

    def terminal_send_text(self, terminal_id, text):
        konsole_session = self.__terminal_id_to_konsole_session_id(terminal_id)

        konsole_session_object = self.__bus.get_object(
            self.__common_name, '/Sessions/{}'.format(konsole_session)
        )
        konsole_session_object.sendText(
            text,
            dbus_interface=self.__konsole_session_interface_name
        )

    def session_at_tab(self, tab_index):
        return self.__tabs_interface.sessionAtTab(tab_index)

    def set_tab_title(self, session_id, tab_title):
        self.__tabs_interface.setTabTitle(session_id, tab_title)

    def tab_title(self, session_id):
        return self.__tabs_interface.tabTitle(session_id)

    def toggle_window_state(self):
        self.__window_interface.toggleWindowState()


def get_stdout(cmd, **opts):
    opts.update({'stdout': subprocess.PIPE})
    if 'env' in opts:
        env, opts['env'] = opts['env'], os.environ.copy()
        opts['env'].update(env)

    quoted = re.findall(r'".+"', cmd)
    for q in quoted:
        cmd = cmd.replace(q, '%s')

    cmd_split = cmd.split()
    for i, part in enumerate(cmd_split):
        if part == '%s':
            cmd_split[i] = quoted.pop(0)[1:-1]

    proc = subprocess.Popen(cmd_split, **opts)
    return proc.communicate()[0].decode('utf-8').strip()


def write_data(data, file_obj):
    print(json.dumps(data, indent=4, sort_keys=True), file=file_obj)


def load_data_legacy(file_obj):
    cp = ConfigParser()
    cp.read_file(file_obj)

    sections = cp.sections()

    data = {
        "sessions": []
    }

    session_dummy = {
        "tab_title": "",
        "is_closable": True,
        "keyboard_input_enabled": True,
        "monitor_activity_enabled": False,
        "monitor_silence_enabled": False,
        "active": False,
        "terminals": []
    }

    terminal_dummy = {
        "keyboard_input_enabled": True,
        "monitor_activity_enabled": False,
        "monitor_silence_enabled": False,
        'cmd': "",
        'cwd': "",
        'text': ""
    }

    terminals_list = []
    current_session = None

    for i, section in enumerate(sorted(sections)):
        opts = dict(cp.items(section))

        # every non split is a new tab
        if not opts['split']:
            if current_session is not None:
                current_session["terminals"] = terminals_list
                data["sessions"].append(current_session)
                terminals_list = []

            current_session = session_dummy.copy()
            current_session["tab_title"] = opts['title']

        terminal = terminal_dummy.copy()

        terminal["cmd"] = opts['cmd'] if opts['cmd'] else ""
        terminal["cwd"] = opts['cwd'] if opts['cwd'] else ""

        terminals_list.append(terminal)

        if opts['active'] is not None and opts['active'].lower() in [
            'y', 'yes', 'true', '1'
          ]:
            current_session["active"] = True

    if current_session is not None:
        current_session["terminals"] = terminals_list
        data["sessions"].append(current_session)

    return data


def load_data(file_obj):
    return json.load(file_obj)


def get_data():
    yak = Yakuake()

    data = {
        "sessions": []
    }

    active_session_id = yak.active_session_id()

    for session_id in sorted(yak.session_id_list()):
        session_data = {
            "tab_title": yak.tab_title(session_id),
            "is_closable": yak.is_session_closable(session_id),
            "keyboard_input_enabled": yak.is_session_keyboard_input_enabled(
                session_id
            ),
            "monitor_activity_enabled": yak.is_session_monitor_activity_enabled(
                session_id
            ),
            "monitor_silence_enabled": yak.is_session_monitor_silence_enabled(
                session_id
            ),
            "active": active_session_id == session_id,
            "terminals": []
        }
        # active_terminal_id = yak.active_terminal_id()

        terminal_ids = yak.terminal_ids_for_session_id(session_id)
        for terminal_id in sorted(terminal_ids):
            terminal_data = {
                # TODO: find a way to raise tabs - not only sessions
                # 'active': active_terminal_id == terminal_id,
                "keyboard_input_enabled": yak.is_terminal_keyboard_input_enabled(
                    terminal_id
                ),
                "monitor_activity_enabled": yak.is_terminal_monitor_activity_enabled(
                    terminal_id
                ),
                "monitor_silence_enabled": yak.is_terminal_monitor_silence_enabled(
                    terminal_id
                ),
                'cmd': "",
                'cwd': "",
                'text': ""
            }

            pid = yak.terminal_pid(terminal_id)
            fg_pid = yak.terminal_forground_pid(terminal_id)

            cmd = ''
            if fg_pid != pid:
                out = get_stdout(
                    'ps ' + str(fg_pid),
                    env={'PS_FORMAT': 'command'}
                )
                cmd = out.split('\n')[-1]
            cwd = get_stdout('pwdx ' + str(pid)).partition(' ')[2]

            split = yak.SplitType.Left_Right.name if terminal_id % 2 \
                else yak.SplitType.Top_Bottom.name

            terminal_data['cmd'] = cmd
            terminal_data['cwd'] = cwd

            session_data['terminals'].append(terminal_data)
        data['sessions'].append(session_data)
    return data


def close_sessions(sessions):
    yak = Yakuake()
    for session in sessions:
        if yak.is_session_closable(session):
            yak.remove_session(session)


class InitialRemoval(Enum):
    Null = 0
    Session = 1
    All = 2


def apply_data(data, initial_removal=InitialRemoval.Null):
    if len(data['sessions']) == 0:
        print("No session data found, aborting", file=sys.stderr)
        sys.exit(1)

    yak = Yakuake()

    initial_sessions = yak.session_id_list()
    initial_active_session_id = yak.active_session_id()
    new_active_session_id = None

    for session in data['sessions']:
        session_id = yak.add_session()
        yak.set_tab_title(session_id, session["tab_title"])

        yak.set_session(
            session_id,
            closable=session["is_closable"],
            keyboard_input_enabled=session["keyboard_input_enabled"],
            monitor_activity_enabled=session["monitor_activity_enabled"],
            monitor_silence_enabled=session["monitor_silence_enabled"]
        )

        if session["active"]:
            new_active_session_id = session_id

        terminal_ids = [None, None]
        terminal_splits = [yak.SplitType.Left_Right, yak.SplitType.Top_Bottom]
        for idx, terminal in enumerate(session['terminals']):
            terminal_id = None
            split_idx = (idx+1) % 2
            if idx == 0:
                # an open session has always one terminal open
                terminal_id = yak.terminal_ids_for_session_id(session_id)[0]
                terminal_ids[0] = terminal_id
            else:
                split_dir = terminal_splits[split_idx]
                terminal_id = yak.split_terminal(
                    terminal_ids[split_idx],
                    split_dir
                )
                if terminal_ids[1] is None:
                    terminal_ids[1] = terminal_id
                terminal_splits[split_idx] = yak.SplitType.Left_Right \
                    if split_dir == yak.SplitType.Top_Bottom \
                    else yak.SplitType.Top_Bottom

            yak.set_terminal(
                terminal_id,
                keyboard_input_enabled=terminal["keyboard_input_enabled"],
                monitor_activity_enabled=terminal["monitor_activity_enabled"],
                monitor_silence_enabled=terminal["monitor_silence_enabled"]
            )

            yak.run_command_in_terminal(
                terminal_id,
                " cd {}".format(terminal["cwd"])
            )
            yak.run_command_in_terminal(
                terminal_id,
                terminal["cmd"]
            )
            yak.terminal_send_text(
                terminal_id,
                terminal["text"]
            )
    if initial_removal == InitialRemoval.Session:
        close_sessions([initial_active_session_id])
    elif initial_removal == InitialRemoval.All:
        close_sessions(initial_sessions)
    yak.raise_session(new_active_session_id)


def main():
    arg_parser = ArgumentParser(
        description="Save and load yakuake sessions. Settings are exported "
                    "in INI format. Default action is to print the current "
                    "setup to stdout in INI format."
    )

    group_exclusive = arg_parser.add_mutually_exclusive_group(required=True)

    group_exclusive.add_argument(
        '-i', '--in-file',
        help='File to read from, or "-" for stdin',
        dest='infile',
        metavar='FILE'
    )

    group_exclusive.add_argument(
        '-I', '--legacy-in-file',
        help='Legacy config format file to read from, or "-" for stdin',
        dest='legacy_infile',
        metavar='FILE'
    )

    group_exclusive.add_argument(
        '-o', '--out-file',
        help='File to write to, or "-" for stdout',
        dest='outfile',
        metavar='FILE'
    )

    arg_parser.add_argument(
        '--force-overwrite',
        help='Do not prompt for confirmation if out-file exists',
        dest='force_overwrite',
        action="store_true",
        default=False
    )

    group_exclusive_initial = arg_parser.add_mutually_exclusive_group(required=False)

    group_exclusive_initial.add_argument(
        '--remove-initial-session',
        help='Close session calling this script',
        dest='remove_initial_session',
        action="store_true",
        default=False
    )
    group_exclusive_initial.add_argument(
        '--remove-all-initial-sessions',
        help='Close all session before loading new ones',
        dest='remove_all_initial_sessions',
        action="store_true",
        default=False
    )

    args = arg_parser.parse_args()

    initial_removal = None
    if args.remove_all_initial_sessions:
        initial_removal = InitialRemoval.All
    elif args.remove_initial_session:
        initial_removal = InitialRemoval.Session
    else:
        initial_removal = InitialRemoval.Null

    if args.outfile is None and args.infile is None:
        data = get_data()
        write_data(data, sys.stdout)

    load_fn = load_data
    if args.legacy_infile is not None:
        args.infile = args.legacy_infile
        load_fn = load_data_legacy

    if args.infile is not None:
        if args.infile == '-':
            apply_data(load_fn(sys.stdin), initial_removal)
        elif os.path.exists(args.infile):
            file_path = open(args.infile, 'r')
            apply_data(load_fn(file_path), initial_removal)
        else:
            print("ERROR - Input file does not exist: '{}'".format(args.infile),
                  file=sys.stderr)
            return 1

        return 0

    if args.outfile is not None:
        if args.outfile == '-':
            write_data(get_data(), sys.stdout)
        elif not os.path.exists(args.outfile) or args.force_overwrite:
            file_path = open(args.outfile, 'w')
            write_data(get_data(), file_path)
        else:
            print("ERROR - File does already exist: '{}'".format(args.outfile),
                  file=sys.stderr)
            return 1

        return 0

    print("ERROR - Malformed arguments were passed.", file=sys.stderr)
    return 1


if __name__ == '__main__':
    sys.exit(main())
